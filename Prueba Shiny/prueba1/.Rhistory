filter(ano >= 2016,
ano <=2020) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo Producto",
"Título", "país", "Año",
"Disponibilidad","Institución financiadora", "Autores"))
runApp('prueba_margaret')
articulos_unicos_2016_2020 <-
read_csv(here("output",
"articulos.csv")) |>
filter(ano >= 2016,
ano <=2020) |>
select(-id) |>
mutate(DOI = str_extract(DOI, "\\d.*")) |>
mutate(DOI =  str_c("<a href=","\"",
"https://doi.org/",
DOI,
"\"",
">Enlace</a>")) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo producto",
"Título", "País revista", "Revista",
"ISSN","Casiflicación Revista", "Año", "Volumen",
"Fasc","Paginas", "Enlace artículo", "Autores"))
View(articulos_unicos_2016_2020)
capitulos_2016_2020 <-
read_csv(here("output",
"capitulos.csv")) |>
filter(ano >= 2016,
ano <=2020) |>
select(-vol, -tipo_producto) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría",
"Título capitulo", "País", "Año",
"Titulo libro","ISBN", "Paginas", "Editorial",
"Autores"))
libros_2016_2020 <-
read_csv(here("output",
"libros.csv")) |>
filter(Ano >= 2016,
Ano <=2020) |>
select(-Tipo_producto) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría",
"Título libro", "País", "Año",
"ISBN","Editorial", "Autores"))
software_2016_2020 <-
read_csv(here("output",
"softwares.csv")) |>
filter(ano >= 2016,
ano <=2020) |>
select(-nombre_proyecto, -tipo_producto) |>
mutate(sitio_web= str_c("<a href=",
sitio_web,
">Link</a>")) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría",
"Título", "País", "Año",
"Disponibilidad","Sitio web", "Nombre comercial", "Institución financiadora",
"Autores"))
trabajo_2016_2020 <-
read_csv(here("output",
"trabajos_dirigidos.csv")) |>
mutate(hasta = str_remove(hasta, ".* "),
hasta = str_trim(hasta),
desde = str_remove(desde, "\\d.* "),
desde = str_trim(desde)) |>
filter(desde >= 2016,
hasta <=2020)
innovacion_2016_2020 <-
read_csv(here("output",
"innovaciones_gestion.csv")) |>
filter(ano >= 2016,
ano <=2020) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo Producto",
"Título", "país", "Año",
"Disponibilidad","Institución financiadora", "Autores"))
tabPanel("Producción científica",
tabsetPanel(type = "tabs",
tabPanel("Articulos", fluidPage((DT::dataTableOutput('articulo'))
),),
tabPanel("Capítulos", fluidPage((DT::dataTableOutput('capitulo'))
),),
tabPanel("Libros", fluidPage((DT::dataTableOutput('libro'))
),),
tabPanel("Software", fluidPage((DT::dataTableOutput('software'))
),),
tabPanel("Innovaciones", fluidPage((DT::dataTableOutput('innovaciones'))
),),
tabPanel("Trabajos dirigidos/tutorías", fluidPage((DT::dataTableOutput('trabajosd'))
),),)
),
ui <- fluidPage(theme = shinytheme("readable"),
navbarPage(
"Margaret",
tabPanel("General",
tabsetPanel(type = "tabs",
tabPanel("Grupos", fluidPage((DT::dataTableOutput('ex1'))
),),
tabPanel("Investigadores", fluidPage((selectInput("grupos", "Grupos:",
c(grupos$grupo)))
),(DT::dataTableOutput('ex2')),
),
tabPanel("Paises", fluidPage((DT::dataTableOutput('ex3'))
),
),
tabPanel("Revistas", fluidPage("Revistas"))),
),
tabPanel("Producción científica",
tabsetPanel(type = "tabs",
tabPanel("Articulos", fluidPage((DT::dataTableOutput('articulo'))
),),
tabPanel("Capítulos", fluidPage((DT::dataTableOutput('capitulo'))
),),
tabPanel("Libros", fluidPage((DT::dataTableOutput('libro'))
),),
tabPanel("Software", fluidPage((DT::dataTableOutput('software'))
),),
tabPanel("Innovaciones", fluidPage((DT::dataTableOutput('innovaciones'))
),),
tabPanel("Trabajos dirigidos/tutorías", fluidPage((DT::dataTableOutput('trabajosd'))
),),)
),
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
paises_general <- articulos_unicos_2016_2020 |>
count(pais_revista, sort = TRUE)
runApp('prueba_margaret')
articulos_2016_2020 <- articulos_unicos_2016_2020 |>
filter(ano >= 2016,
ano <=2020) |>
select(-id) |>
mutate(DOI = str_extract(DOI, "\\d.*")) |>
mutate(DOI =  str_c("<a href=","\"",
"https://doi.org/",
DOI,
"\"",
">Enlace</a>")) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo producto",
"Título", "País revista", "Revista",
"ISSN","Casiflicación Revista", "Año", "Volumen",
"Fasc","Paginas", "Enlace artículo", "Autores"))
articulos_unicos_2016_2020 <-
read_csv(here("output",
"articulos.csv"))
View(articulos_unicos_2016_2020)
articulos_2016_2020 <- articulos_unicos_2016_2020 |>
select(-id) |>
mutate(DOI = str_extract(DOI, "\\d.*")) |>
mutate(DOI =  str_c("<a href=","\"",
"https://doi.org/",
DOI,
"\"",
">Enlace</a>")) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo producto",
"Título", "País revista", "Revista",
"ISSN","Casiflicación Revista", "Año", "Volumen",
"Fasc","Paginas", "Enlace artículo", "Autores"))
View(articulos_2016_2020)
runApp('prueba_margaret')
runApp('prueba_margaret')
articulos_2016_2020 <- articulos_unicos_2016_2020 |>
select(-id) |>
mutate(DOI = str_extract(DOI, "\\d.*")) |>
mutate(DOI =  str_c("<a href=","\"",
"https://doi.org/",
DOI,
"\"",
">Enlace</a>")) |>
datatable(options = list(pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Categoría", "Tipo producto",
"Título", "País revista", "Revista",
"ISSN","Casiflicación Revista", "Año", "Volumen",
"Fasc","Paginas", "Enlace artículo", "Autores"))
View(articulos_2016_2020)
articulos_unicos_2016_2020 <-
read_csv(here("output",
"articulos.csv")) |>
filter(ano >= 2016,
ano <=2020)
View(articulos_unicos_2016_2020)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
shiny::runApp('prueba_margaret')
shiny::runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
shiny::runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_2')
runApp('prueba_2')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
shiny::runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
#revistas
revistas_actuales <-
read_csv(here("output",
"current_journals.csv")) |>
mutate(porcentaje = str_c(porcentaje," %")) |>
datatable(options = list(pageLength = 20),
colnames = c('Revista', 'ISSN', 'Categoría Publindex',
'Categoría Scimago','Cantidad', 'Porcentaje'))
#revistas
revistas_actuales <-
read_csv(here("output",
"current_journals.csv")) |>
mutate(porcentaje = str_c(porcentaje," %")) |>
datatable(options = list(pageLength = 20),
colnames = c('Revista', 'ISSN', 'Categoría Publindex',
'Categoría Scimago','Cantidad', 'Porcentaje'))
View(revistas_actuales)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
shiny::runApp('prueba_margaret')
#dataframe graficos
#clasificacion grupos de inves
data1 <- grupos_general |> count(clasificacion) |> arrange(desc(clasificacion))
#dataframe graficos
#clasificacion grupos de inves
data1 <- grupos_general |>
count(clasificacion)
View(grupos_general)
#dataframe graficos
#clasificacion grupos de inves
data1 <- grupos_general
grupos_general <-
read_csv(here("output",
"grupos_general.csv"))
View(grupos_general)
#dataframe graficos
#clasificacion grupos de inves
data1 <- grupos_general |>
count(clasificacion) |>
arrange(desc(clasificacion))
View(data1)
grupos_general <-
read_csv(here("output",
"grupos_general.csv")) |>
select(grupo, clasificacion, sum_papers, departamento , url,
fecha_creacion,lider, email, area_conocimiento_1) |>
mutate(url= str_c("<a href=",
url,
">Link</a>")) |>
datatable(filter = 'top', options = list(columnDefs = list(list(className = 'dt-center', targets = 5)),
pageLength = 15),
escape = FALSE,
colnames = c("Grupo", "Clasificación", "Cantidad artículos",
"Departamento","GrupLAC",
"Fecha Creación", "Líder", "Email",
"Área de Conocimiento"))
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
#revistas
revistas_actuales <-
read_csv(here("output",
"current_journals.csv")) |>
mutate(porcentaje = str_c(porcentaje," %")) |>
datatable(options = list(pageLength = 20),
colnames = c('Revista', 'ISSN', 'Categoría Publindex',
'Categoría Scimago','Cantidad', 'Porcentaje'))
runApp('prueba_margaret')
articulos_unicos_2016_2020 <-
read_csv(here("output",
"articulos.csv")) |>
filter(ano >= 2016,
ano <=2020)
investigadores_general <-
read_csv(here("output",
"investigadores.csv"))
grupos_general <-
read_csv(here("output",
"grupos_general.csv"))
paises_general <- articulos_unicos_2016_2020 |>
count(pais_revista, sort = TRUE)
paises_general$porcentaje <- round(prop.table(paises_general$n),3)*100
View(paises_general)
articulos_2016_2020 <-
read_csv(here("output",
"articulos.csv"))
View(articulos_2016_2020)
capitulos_2016_2020 <-
read_csv(here("output",
"capitulos.csv"))
View(articulos_unicos_2016_2020)
libros_2016_2020 <-
read_csv(here("output",
"libros.csv"))
software_2016_2020 <-
read_csv(here("output",
"softwares.csv")) |>
filter(ano >= 2016,
ano <=2020)
trabajo_2016_2020 <-
read_csv(here("output",
"trabajos_dirigidos.csv"))
innovacion_2016_2020 <-
read_csv(here("output",
"innovaciones_gestion.csv")) |>
filter(ano >= 2016,
ano <=2020)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
#dataframe filtros
grupos <- articulos_unicos_2016_2020 |>
select(grupo) |>
unique()
View(grupos)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('Auxiliar/auxiliar.R')
runApp('Auxiliar/auxiliar.R')
runApp('Auxiliar/app.R')
runApp('prueba_margaret')
runApp('Auxiliar/app.R')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
source("E:/Cg/Programas/Git/Shiny_App/Prueba Shiny/prueba1/Auxiliar/app.R")
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(d(),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(d())
})
# Generate an HTML table view of the data ----
output$table <- renderTable({
d()
})
}
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
View(data1)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
datos2 <- investigadores_general |> count(clasification) |> arrange(desc(clasification))
View(datos2)
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
runApp('prueba_margaret')
dato3 <- articulos_unicos_2016_2020 |> count(categoria_revista) |>
arrange(desc(categoria_revista)) |>
mutate(categoria_revista = ifelse(is.na(categoria_revista),"N/A",categoria_revista))
View(dato3)
data4 <- articulos_unicos_2016_2020 |>
select(categoria, ano, grupo) |>
count(ano, sort = FALSE, name = "producciones")
View(data4)
View(data4)
data5 <- investigadores_general |> count(posgrade) |>
arrange(desc(posgrade)) |>
rename(formacion = 1)
View(data5)
runApp('prueba_margaret')
data3 <- articulos_unicos_2016_2020 |> count(categoria_revista) |>
arrange(desc(categoria_revista)) |>
mutate(categoria_revista = ifelse(is.na(categoria_revista),"N/A",categoria_revista))
rm(dato3)
runApp('prueba_margaret')
runApp('prueba_margaret')
